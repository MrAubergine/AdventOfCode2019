using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AdventOfCode2019
{
    class Day5 : IDay
    {
        public void Part1()
        {
            ResetMem();

            Execute(0);

            Console.WriteLine("Day2 Part1 Result = {0}", 0);
        }

        public void Part2()
        {
            ResetMem();

            Execute(0);

            Console.WriteLine("Day2 Part1 Result = {0}", 0);
        }

        private bool Execute(int ip)
        {
            while (Mem[ip] != 99)
            {
                int ipstep = 0;

                int inst = Mem[ip];
                int opcode = Mem[ip] % 100;
                inst /= 100;
                int[] pmode = new int[3];
                for( int p=0; p<3; p++)
                {
                    pmode[p] = inst % 10;
                    inst /= 10;
                }

                switch (opcode)
                {
                    case 1: // Add
                        Write(Mem[ip + 3], pmode[2], Read(Mem[ip + 1], pmode[0]) + Read(Mem[ip + 2], pmode[1]));
                        ipstep = 4;
                        break;
                    case 2: // Mul
                        Write(Mem[ip + 3], pmode[2], Read(Mem[ip + 1], pmode[0]) * Read(Mem[ip + 2], pmode[1]));
                        ipstep = 4;
                        break;
                    case 3: // Read
                        Console.Write("In:");
                        String sin = Console.ReadLine();
                        Write(Mem[ip + 1], pmode[0], int.Parse(sin));
                        ipstep = 2;
                        break;
                    case 4: // Write
                    Console.WriteLine("Out: {0}", Read(Mem[ip + 1], pmode[0]));
                        ipstep = 2;
                        break;
                    case 5: // Jump if true
                        if (Read(Mem[ip + 1], pmode[0]) != 0)
                        {
                            ip = Read(Mem[ip + 2], pmode[1]);
                            ipstep = 0;
                        }
                        else
                        {
                            ipstep = 3;
                        }
                        break;
                    case 6: // Jump if false
                        if (Read(Mem[ip + 1], pmode[0]) == 0)
                        {
                            ip = Read(Mem[ip + 2], pmode[1]);
                            ipstep = 0;
                        }
                        else
                        {
                            ipstep = 3;
                        }
                        break;
                    case 7: // Less than
                        Write(Mem[ip + 3], pmode[2], (Read(Mem[ip + 1], pmode[0]) < Read(Mem[ip + 2], pmode[1])) ? 1 : 0);
                        ipstep = 4;
                        break;
                    case 8: // Equals
                        Write(Mem[ip + 3], pmode[2], (Read(Mem[ip + 1], pmode[0]) == Read(Mem[ip + 2], pmode[1]) ? 1 : 0));
                        ipstep = 4;
                        break;
                    default:
                        Console.WriteLine("Program Error at {0}", ip);
                        return false;
                }
                ip += ipstep;
            }

            return true;
        }

        int Read(int Param, int Mode)
        {
            switch (Mode)
            {
                case 0:
                    return Mem[Param];
                case 1:
                    return Param;
                default:
                    Console.WriteLine("Parameter Mode Error on Read {0}", Mode);
                    return 0;
            }
        }

        void Write(int Param, int Mode, int val)
        {
            switch(Mode)
            {
                case 0:
                    Mem[Param] = val;
                    break;
                default:
                    Console.WriteLine("Parameter Mode Error on Write {0}", Mode);
                    break;
            }
        }

        public void ResetMem()
        {
            Mem = new int[InputData.Length];

            int Addr = 0;
            foreach (int Val in InputData)
            {
                Mem[Addr++] = Val;
            }
        }

        private int[] Mem;

        private int[] InputData = new int[]
        {
            3,225,1,225,6,6,1100,1,238,225,104,0,1102,78,40,225,1102,52,43,224,1001,224,-2236,224,4,224,102,8,223,223,101,
            4,224,224,1,224,223,223,1,191,61,224,1001,224,-131,224,4,224,102,8,223,223,101,4,224,224,1,223,224,223,1101,86,
            74,225,1102,14,76,225,1101,73,83,224,101,-156,224,224,4,224,102,8,223,223,101,6,224,224,1,224,223,223,1102,43,
            82,225,2,196,13,224,101,-6162,224,224,4,224,102,8,223,223,101,5,224,224,1,223,224,223,1001,161,51,224,101,-70,224,
            224,4,224,102,8,223,223,1001,224,1,224,1,224,223,223,102,52,187,224,1001,224,-832,224,4,224,102,8,223,223,101,1,
            224,224,1,224,223,223,1102,19,79,225,101,65,92,224,1001,224,-147,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,
            223,1102,16,90,225,1102,45,44,225,1102,92,79,225,1002,65,34,224,101,-476,224,224,4,224,102,8,223,223,1001,224,5,
            224,1,224,223,223,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,
            1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,
            280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,
            314,0,0,106,0,0,1105,1,99999,107,226,226,224,1002,223,2,223,1005,224,329,1001,223,1,223,1007,226,226,224,102,2,
            223,223,1005,224,344,101,1,223,223,1008,226,226,224,102,2,223,223,1005,224,359,1001,223,1,223,8,226,677,224,102,
            2,223,223,1006,224,374,101,1,223,223,1107,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,1108,226,677,224,
            102,2,223,223,1005,224,404,101,1,223,223,107,677,677,224,102,2,223,223,1006,224,419,1001,223,1,223,7,677,226,224,
            102,2,223,223,1005,224,434,101,1,223,223,1007,677,677,224,102,2,223,223,1005,224,449,1001,223,1,223,108,226,677,
            224,102,2,223,223,1005,224,464,1001,223,1,223,108,226,226,224,102,2,223,223,1006,224,479,101,1,223,223,107,226,
            677,224,102,2,223,223,1006,224,494,1001,223,1,223,7,226,226,224,1002,223,2,223,1006,224,509,101,1,223,223,1108,
            677,226,224,102,2,223,223,1005,224,524,101,1,223,223,1107,677,226,224,102,2,223,223,1005,224,539,101,1,223,223,
            1008,677,226,224,102,2,223,223,1005,224,554,101,1,223,223,1008,677,677,224,1002,223,2,223,1006,224,569,101,1,223,
            223,1107,677,677,224,102,2,223,223,1006,224,584,1001,223,1,223,1108,226,226,224,1002,223,2,223,1006,224,599,101,
            1,223,223,7,226,677,224,102,2,223,223,1006,224,614,101,1,223,223,108,677,677,224,1002,223,2,223,1006,224,629,101,
            1,223,223,1007,677,226,224,102,2,223,223,1006,224,644,101,1,223,223,8,677,677,224,1002,223,2,223,1006,224,659,101,
            1,223,223,8,677,226,224,102,2,223,223,1005,224,674,101,1,223,223,4,223,99,226
        };
    }
}
